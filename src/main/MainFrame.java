package main;

import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.SwingWorker;
import javax.swing.JDialog;
import javax.swing.BorderFactory;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import java.util.Locale;
import jxl.WorkbookSettings;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.WriteException;
import static main.ExcelToJTable.headers;

/**
 *
 * @author moehandi
 */
public class MainFrame extends javax.swing.JFrame {

    File file = null;
    Properties props = null;
    DefaultTableModel model, tableModelDataset, tableModelIdentify;
    final String FILE_DATASET_HARI_INI = "dataset_cuaca_hari_ini.list";
    final String FILE_DATASET_HARI_ESOK = "dataset_cuaca_hari_esok.list";
    final String FILE_TESTSET_HARI_INI = "testset_cuaca_hari_ini.list";
    final String FILE_TESTSET_HARI_ESOK = "testset_cuaca_hari_esok.list";
    final String FILE_JST_HARI_INI = "jst_hari_ini.nnet";
    final String FILE_JST_HARI_ESOK = "jst_hari_esok.nnet";
    String fileVectorObject;
    static Vector header = new Vector();
    static Vector data = new Vector();
    String tahun = "";
    String bulan = "";
    String hari = "";
    String temperatur = "";
    String kelembaban = "";
    String rainfall = "";
    String statRain = "";
    static int tableWidth = 0; // set the tableWidth
    static int tableHeight = 0; // set the tableHeight
    String tglHariIni;
    String tglEsokHari;
    String prediksiHariIni;
    String prediksiEsokHari;
    int tableRowCount;
    ConfigurationProperties conf = new ConfigurationProperties();

    public MainFrame() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension frameSize = this.getSize();
        if (frameSize.height > screenSize.height) {
            frameSize.height = screenSize.height;
        }
        if (frameSize.width > screenSize.width) {
            frameSize.width = screenSize.width;
        }
        this.setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 3);
        tableModelDataset = (DefaultTableModel) tableSource.getModel();
        loadOptionProperties();

    }

    public String getPrediksiEsokHari() {
        return txtHasilPrediksiEsok.getText().toString();
    }

    public String getPrediksiHariIni() {
        return txtHasilPrediksiHariIni.getText().toString();
    }

    public String getTglEsokHari() {
        return tanggalEsok.getText().toString();
    }

    public String getTglHariIni() {
        return tanggalHariIni.getText().toString();
    }
    
    public String getMaxError(){
        return txtMaxError.getText().toString();
    }
    
    public String getMaxIteration(){
        return txtMaxIteration.getText().toString();
    }
    
    public String getHiddenLayer(){
        return txtNeuronHiddenLayer.getText().toString();
    }

    public String getMomentum(){
        return txtMomentum.getText().toString();
    }
    
    public String getLearningRate(){
        return txtLearningRate.getText().toString();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        buttonAddXlsFile = new javax.swing.JButton();
        scrollTable = new javax.swing.JScrollPane();
        tableSource = new javax.swing.JTable();
        buttonNormalisasi = new javax.swing.JButton();
        buttonDeleteAudio = new javax.swing.JButton();
        txtConvertTime = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtLearningRate = new javax.swing.JTextField();
        txtMomentum = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtMaxIteration = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtMaxError = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtNeuronHiddenLayer = new javax.swing.JTextField();
        bSaveProperties = new javax.swing.JButton();
        txtTrainTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        buttonTest = new javax.swing.JButton();
        txtTestTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        buttonTrain = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        buttonPrediksiHariIni = new javax.swing.JButton();
        txtHasilPrediksiHariIni = new javax.swing.JTextField();
        tanggalHariIni = new javax.swing.JTextField();
        tanggalEsok = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtHasilPrediksiEsok = new javax.swing.JTextField();
        buttonPrediksiHariEsok = new javax.swing.JButton();
        bSimpanPrediksi = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPrint = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuImport = new javax.swing.JMenu();
        fileMenuTambahFileSuara = new javax.swing.JMenuItem();
        fileMenuExit = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aplikasi JST Prediksi Cuaca Kota Bengkulu ");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setPreferredSize(new java.awt.Dimension(914, 36));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 16));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Aplikasi Jaringan Syaraf Tiruan Prediksi Cuaca Kota Bengkulu");
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(914, 350));
        jPanel7.setLayout(new java.awt.GridLayout(1, 4));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dataset Cuaca"));
        jPanel2.setName(""); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(457, 340));

        buttonAddXlsFile.setText("Import Data");
        buttonAddXlsFile.setToolTipText("Tambahkan File Dataset ke dalam Tabel");
        buttonAddXlsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddXlsFileActionPerformed(evt);
            }
        });

        scrollTable.setAutoscrolls(true);

        tableSource.setAutoCreateRowSorter(true);
        tableSource.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableSource.setFocusTraversalPolicyProvider(true);
        scrollTable.setViewportView(tableSource);

        buttonNormalisasi.setText("Normalisasi");
        buttonNormalisasi.setToolTipText("Normalisasi Dataset");
        buttonNormalisasi.setEnabled(false);
        buttonNormalisasi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNormalisasiActionPerformed(evt);
            }
        });

        buttonDeleteAudio.setText("Hapus");
        buttonDeleteAudio.setToolTipText("Hapus salah satu dataset dari Tabel");
        buttonDeleteAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteAudioActionPerformed(evt);
            }
        });

        txtConvertTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel2.setText("ms");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollTable, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(buttonNormalisasi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtConvertTime, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(buttonAddXlsFile, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonDeleteAudio, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAddXlsFile)
                    .addComponent(buttonDeleteAudio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollTable, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                .addGap(9, 9, 9)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtConvertTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonNormalisasi))
                .addContainerGap())
        );

        jPanel7.add(jPanel2);
        jPanel2.getAccessibleContext().setAccessibleDescription("");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Jaringan Syaraf Tiruan"));
        jPanel3.setPreferredSize(new java.awt.Dimension(457, 340));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel9.setText("Learning Rate");

        txtLearningRate.setText("0.2");

        txtMomentum.setText("0.7");

        jLabel10.setText("Momentum");

        jLabel11.setText("Max Iteration");

        txtMaxIteration.setText("10000");

        jLabel12.setText("Max Error");

        txtMaxError.setText("0.001");

        jLabel13.setText("Neuron Hidden Layers");

        txtNeuronHiddenLayer.setText("7");
        txtNeuronHiddenLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNeuronHiddenLayerActionPerformed(evt);
            }
        });

        bSaveProperties.setText("Simpan");
        bSaveProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSavePropertiesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel13))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtLearningRate, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(txtNeuronHiddenLayer, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addGap(110, 110, 110)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bSaveProperties, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(txtMomentum, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(txtMaxError, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(txtMaxIteration, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtNeuronHiddenLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMomentum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtMaxError, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaxIteration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bSaveProperties)
                .addContainerGap())
        );

        txtTrainTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel3.setText("ms");

        buttonTest.setText("Testing");
        buttonTest.setToolTipText("Menguji Seluruh Dataset yang telah dilatih");
        buttonTest.setEnabled(false);
        buttonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTestActionPerformed(evt);
            }
        });

        txtTestTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel5.setText("ms");

        buttonTrain.setText("Training");
        buttonTrain.setToolTipText("Melakukan Pelatihan Jaringan Syaraf Tiruan");
        buttonTrain.setEnabled(false);
        buttonTrain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonTrainActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonTest, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                            .addComponent(buttonTrain, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(txtTestTime, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(txtTrainTime, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(40, 40, 40)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTrainTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(buttonTrain))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonTest)
                    .addComponent(txtTestTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(30, 30, 30))
        );

        jPanel7.add(jPanel3);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Prediksi"));

        buttonPrediksiHariIni.setText("Prediksi Hari Ini >>");
        buttonPrediksiHariIni.setToolTipText("Identifikasi Objek Suara Burung yang dipilih");
        buttonPrediksiHariIni.setEnabled(false);
        buttonPrediksiHariIni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrediksiHariIniActionPerformed(evt);
            }
        });

        tanggalEsok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanggalEsokActionPerformed(evt);
            }
        });

        jLabel7.setText("Tanggal Prediksi Hari Ini");

        jLabel4.setText("Tanggal Prediksi Esok Hari");

        buttonPrediksiHariEsok.setText("Prediksi Esok Hari >>");
        buttonPrediksiHariEsok.setEnabled(false);
        buttonPrediksiHariEsok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPrediksiHariEsokActionPerformed(evt);
            }
        });

        bSimpanPrediksi.setText("Simpan Prediksi");
        bSimpanPrediksi.setEnabled(false);
        bSimpanPrediksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSimpanPrediksiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tanggalEsok, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(tanggalHariIni, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(bSimpanPrediksi, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonPrediksiHariEsok, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonPrediksiHariIni, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtHasilPrediksiHariIni, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(txtHasilPrediksiEsok, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tanggalHariIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tanggalEsok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(68, 68, 68)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonPrediksiHariIni)
                    .addComponent(txtHasilPrediksiHariIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonPrediksiHariEsok)
                    .addComponent(txtHasilPrediksiEsok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bSimpanPrediksi)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        jPanel7.add(jPanel5);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(914, 96));

        txtPrint.setColumns(50);
        txtPrint.setRows(5);
        jScrollPane1.setViewportView(txtPrint);

        jTabbedPane1.addTab("Log Output", jScrollPane1);

        menuImport.setText("File");
        menuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImportActionPerformed(evt);
            }
        });

        fileMenuTambahFileSuara.setText("Import Data Excel");
        fileMenuTambahFileSuara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuTambahFileSuaraActionPerformed(evt);
            }
        });
        menuImport.add(fileMenuTambahFileSuara);

        fileMenuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuExit.setText("Keluar");
        fileMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuExitActionPerformed(evt);
            }
        });
        menuImport.add(fileMenuExit);

        jMenuBar1.add(menuImport);

        jMenu3.setText("Bantuan");

        jMenuItem3.setText("Cara Penggunaan");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem2.setText("Tentang");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1008, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Log Sistem");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddXlsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddXlsFileActionPerformed
        tableSource.revalidate();
        tableSource.getTableHeader().setReorderingAllowed(false);
        AddSourceFileXls();
        String tanggal = (String) tableSource.getModel().getValueAt(0, 0);
        setJDate(tanggal);
        buttonNormalisasi.setEnabled(true);
    }

    private void setJDate(String tanggal) {
        Date date;
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            date = sdf.parse(tanggal);
            Date dateNow = new Date(date.getTime() + (1000 * 60 * 60 * 24));
            Date dateEsok = new Date(date.getTime() + (1000 * 60 * 60 * 48));
            tanggalHariIni.setText(sdf.format(dateNow));
            tanggalEsok.setText(sdf.format(dateEsok));

        } catch (ParseException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void AddSourceFileXls() throws HeadlessException {
        JFileChooser chooser = new JFileChooser("$HOME");
        //chooser.setMultiSelectionEnabled(true);//multiple selection file (ctrl or shift)

        FileFilter filter1 = new ExtensionFilter("XLS", new String[]{"XLS"});
        chooser.setFileFilter(filter1);
        int returnVal = chooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile();
            fillData(file);
            model = new DefaultTableModel(data, headers);
            tableSource.setModel(model);
        } else {
            //no Approve no Action
        }
    }//GEN-LAST:event_buttonAddXlsFileActionPerformed

    void fillData(File file) {

        Workbook workbook = null;
        try {
            try {
                workbook = Workbook.getWorkbook(file);
            } catch (IOException ex) {
                Logger.getLogger(ExcelToJTable.class.getName()).log(Level.SEVERE, null, ex);
            }
            Sheet sheet = workbook.getSheet(0);

            headers.clear();
            for (int i = 0; i < sheet.getColumns(); i++) {
                Cell cell1 = sheet.getCell(i, 0);
                headers.add(cell1.getContents());
            }
            data.clear();
            for (int j = 1; j < sheet.getRows(); j++) {
                Vector d = new Vector();
                for (int i = 0; i < sheet.getColumns(); i++) {
                    Cell cell = sheet.getCell(i, j);
                    d.add(cell.getContents());
                }
                d.add("\n");
                data.add(d);
            }
        } catch (BiffException e) {
        }
    }

    private void buttonNormalisasiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNormalisasiActionPerformed
        if (tableSource.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null,
                    "Dataset cuaca masih kosong, Silahkan tambahkan.",
                    "Perhatian", JOptionPane.ERROR_MESSAGE);
        } else {
            long startTime = System.currentTimeMillis();
            String dateHariIni = tanggalHariIni.getText();
            normalizeDataset(FILE_DATASET_HARI_INI, dateHariIni);
            normalizedTestSet(FILE_TESTSET_HARI_INI, dateHariIni);

            String dateEsok = tanggalEsok.getText();
            normalizeDataset(FILE_DATASET_HARI_ESOK, dateEsok);
            normalizedTestSet(FILE_TESTSET_HARI_ESOK, dateEsok);

            long endTime = System.currentTimeMillis();
            long totalTime = endTime - startTime;
            txtConvertTime.setText("" + totalTime);
            txtPrint.append("\n\nDataset selesai: " + totalTime + " ms");
            buttonTrain.setEnabled(true);
        }
    }//GEN-LAST:event_buttonNormalisasiActionPerformed

    private void normalizedTestSet(String path, String dateInit) {
        String[] splitDate = dateInit.split("-");
        Cuaca cuaca = new Cuaca();
        int totalRow = tableSource.getRowCount();
        int countSet = 0;

        for (int i = 0; i < totalRow; i++) {
            String tanggal = (String) tableSource.getModel().getValueAt(i, 0);
            String[] splitTgl = tanggal.split("-");
            tahun = splitTgl[0];
            bulan = splitTgl[1];
            hari = splitTgl[2];

            temperatur = (String) tableSource.getModel().getValueAt(i, 1);
            kelembaban = (String) tableSource.getModel().getValueAt(i, 2);
            rainfall = (String) tableSource.getModel().getValueAt(i, 3);
            statRain = (String) tableSource.getModel().getValueAt(i, 5);
            if (countSet < 1) {
                if (bulan.equals(splitDate[1]) && hari.equals(splitDate[2])) {
                    try {
                        cuaca.getNormalizeTestSet(temperatur.replace(",", "."), kelembaban.replace(",", "."), rainfall.replace(",", "."), statRain);
                    } catch (IOException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    countSet++;
                }
            }

        }
        //menulis hasil konversi ke dalam file
        WriteToFile writeTest = new WriteToFile();
        writeTest.writeToFile(path, cuaca.textNormalizedTestset);

    }

    private void normalizeDataset(String path, String dateInit) {
        
        
        txtPrint.append("\nNormalisasi data...\n");

        String[] splitDate = dateInit.split("-");
        Cuaca cuaca = new Cuaca();
        int totalRow = tableSource.getRowCount();
        int countTarget = 0;
        int unselectedRow = totalRow - 10;
        int selectedRow = totalRow - unselectedRow;
        //txtPrint.append("\nTotal Data: " + totalRow + "");
        txtPrint.append("\n(Tanggal)\tTemperatur \tKelembaban \tRainfall\tStatus]");
//            for (int i = 0; i < totalRow; i++) {
        for (int i = (totalRow - 1); i >= 0; i--) { //count down loop

            String tanggal = (String) tableSource.getModel().getValueAt(i, 0);
            String[] splitTgl = tanggal.split("-");
            tahun = splitTgl[0];
            bulan = splitTgl[1];
            hari = splitTgl[2];

            temperatur = (String) tableSource.getModel().getValueAt(i, 1);
            kelembaban = (String) tableSource.getModel().getValueAt(i, 2);
            rainfall = (String) tableSource.getModel().getValueAt(i, 3);
            statRain = (String) tableSource.getModel().getValueAt(i, 5);
            if(i < selectedRow){
                System.out.println(i);
                try {
                    txtPrint.append("\n(" + tahun + "-" + bulan + "-" + hari + ")\t" + temperatur + "\t\t" + kelembaban + "\t\t" + rainfall + "\t\t" + statRain + "");
                    //System.out.println("(" + tahun + "-" + bulan + "-" + hari + "):[" + temperatur + "," + kelembaban + "," + rainfall + "," + statRain + "]");
                    cuaca.getNormalizeDataset(temperatur.replace(",", "."), kelembaban.replace(",", "."), rainfall.replace(",", "."), statRain);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                countTarget++;
            }
            if (bulan.equals(splitDate[1]) && hari.equals(splitDate[2])) {
                
            }
        }

        txtPrint.append("\nDataset Target Terpilih: " + countTarget);
        //menulis hasil konversi ke dalam file
        WriteToFile write = new WriteToFile();
        write.writeToFile(path, cuaca.textNormalizedDataset);
        txtPrint.append(cuaca.textDataPrint);
    }
    
//METHOD LAMA BERDASARKAN HARI YANG SAMA
//    private void normalizeDataset(String path, String dateInit) {
//        txtPrint.append("\nMelakukan konfigurasi dataset : " + path);
//        txtPrint.append("\nNormalisasi data...\n");
//
//        String[] splitDate = dateInit.split("-");
//        Cuaca cuaca = new Cuaca();
//        int totalRow = tableSource.getRowCount();
//        int countTarget = 0;
//        int selectedRow = totalRow - 10;
//        txtPrint.append("\nTotal Data: " + totalRow + "");
////            for (int i = 0; i < totalRow; i++) {
//        for (int i = (totalRow - 1); i >= 0; i--) { //count down loop
//
//            String tanggal = (String) tableSource.getModel().getValueAt(i, 0);
//            String[] splitTgl = tanggal.split("-");
//            tahun = splitTgl[0];
//            bulan = splitTgl[1];
//            hari = splitTgl[2];
//
//            temperatur = (String) tableSource.getModel().getValueAt(i, 1);
//            kelembaban = (String) tableSource.getModel().getValueAt(i, 2);
//            rainfall = (String) tableSource.getModel().getValueAt(i, 3);
//            statRain = (String) tableSource.getModel().getValueAt(i, 5);
//            if (bulan.equals(splitDate[1]) && hari.equals(splitDate[2])) {
//                try {
//                    System.out.println("(" + tahun + "-" + bulan + "-" + hari + "):[" + temperatur + "," + kelembaban + "," + rainfall + "," + statRain + "]");
//                    cuaca.getNormalizeDataset(temperatur.replace(",", "."), kelembaban.replace(",", "."), rainfall.replace(",", "."), statRain);
//                } catch (IOException ex) {
//                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                countTarget++;
//            }
//        }
//
//        txtPrint.append("\nDataset Target: " + countTarget);
//        //menulis hasil konversi ke dalam file
//        WriteToFile write = new WriteToFile();
//        write.writeToFile(path, cuaca.textNormalizedDataset);
//        txtPrint.append(cuaca.textDataPrint);
//    }
    
    private void fileMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_fileMenuExitActionPerformed

    private void buttonDeleteAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteAudioActionPerformed
        if (tableSource.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null,
                    "Tidak ada data terpilih untuk dihapus",
                    "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            if (tableSource.isRowSelected(tableSource.getSelectedRow())) {
                txtPrint.append("\nMenghapus Data: " + (tableSource.getValueAt(tableSource.getSelectedRow(), 0)));
                model.removeRow(tableSource.getSelectedRow());
                updateRow();
                tableSource.validate();
                String tanggal = (String) tableSource.getModel().getValueAt(0, 0);
                setJDate(tanggal);
            }
        }
    }//GEN-LAST:event_buttonDeleteAudioActionPerformed

    public void printTrain(String message) {
        txtPrint.setText(message);
    }

    private void buttonTrainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTrainActionPerformed
        
        txtPrint.append("\nNeuron Hidden Layer:"+txtNeuronHiddenLayer.getText());
        txtPrint.append("\nLearning Rate:"+txtNeuronHiddenLayer.getText());
        txtPrint.append("\nMomentum:"+txtMomentum.getText());
        txtPrint.append("\nMax Error:"+txtMaxError.getText());
        txtPrint.append("\nMax Iteration:"+txtMaxIteration.getText());
        
        JTextArea msgLabel;
        JProgressBar progressBar;
        final int MAXIMUM = 100;
        JPanel panel;

        progressBar = new JProgressBar(0, MAXIMUM);
        progressBar.setIndeterminate(true);
        msgLabel = new JTextArea(" Memproses ...");
        msgLabel.setEditable(false);

        panel = new JPanel(new BorderLayout(5, 5));
        panel.add(msgLabel, BorderLayout.PAGE_START);
        panel.add(progressBar, BorderLayout.CENTER);
        panel.setBorder(BorderFactory.createEmptyBorder(11, 11, 11, 11));

        final JDialog dialog = new JDialog();
        dialog.getContentPane().add(panel);
        dialog.setResizable(false);
        dialog.pack();
        dialog.setSize(400, 80);
        dialog.setLocationRelativeTo(null);
        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        dialog.setAlwaysOnTop(false);
        dialog.setVisible(true);
        msgLabel.setBackground(panel.getBackground());


        SwingWorker worker;
        worker = new SwingWorker() {

            @Override
            protected void done() {
                // Close the dialog
                dialog.dispose();
            }

            @Override
            protected Object doInBackground() throws Exception {
                long startTime = System.currentTimeMillis();

                NeuralTraining neural = new NeuralTraining();
                neural.train(FILE_DATASET_HARI_INI, FILE_JST_HARI_INI);//proses train network
                neural.train(FILE_DATASET_HARI_ESOK, FILE_JST_HARI_ESOK);
                

                long endTime = System.currentTimeMillis();
                txtPrint.append("\nWaktu training network: " + (endTime - startTime) + " ms");
                txtTrainTime.setText("" + (endTime - startTime));
                buttonTest.setEnabled(true);
                return null;
            }
        };
        worker.execute();
        dialog.setVisible(true);

//        }
    }//GEN-LAST:event_buttonTrainActionPerformed

    private void buttonTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonTestActionPerformed

        long startTime = System.currentTimeMillis();

        NeuralTraining neural = new NeuralTraining();
        neural.test(FILE_DATASET_HARI_INI, FILE_JST_HARI_INI);//proses test network
        neural.test(FILE_DATASET_HARI_ESOK, FILE_JST_HARI_ESOK);

        long endTime = System.currentTimeMillis();
        txtPrint.append("\nWaktu test network: " + (endTime - startTime) + " ms");
        txtTestTime.setText("" + (endTime - startTime));
        buttonPrediksiHariIni.setEnabled(true);
        buttonPrediksiHariEsok.setEnabled(true);
    }//GEN-LAST:event_buttonTestActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        FormHelp formHelp = new FormHelp();
        formHelp.show();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        FormAbout formAbout = new FormAbout();
        formAbout.show();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void fileMenuTambahFileSuaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuTambahFileSuaraActionPerformed
        AddSourceFileXls();
    }//GEN-LAST:event_fileMenuTambahFileSuaraActionPerformed

    private void bSavePropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSavePropertiesActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Simpan pengaturan JST?",
                "Alert", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (option == JOptionPane.YES_OPTION) {
            writeOptionsProperties();

        } else {
        }
    }//GEN-LAST:event_bSavePropertiesActionPerformed

    private void buttonPrediksiHariIniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrediksiHariIniActionPerformed

        NeuralTraining neural = new NeuralTraining();
        String outputPrediction = neural.prediction(FILE_TESTSET_HARI_INI, FILE_JST_HARI_INI);
        String outputPredictionValue = outputPrediction.substring(1, outputPrediction.length() - 1);

        double resultOutput = ((Double.parseDouble(outputPredictionValue) - 0.1) / 0.8) * 100;
        System.out.println("Output Prediksi Hari Ini: " + outputPrediction + "->" + resultOutput);
        statusCuaca(resultOutput);
        txtHasilPrediksiHariIni.setText(statusCuaca(resultOutput));
    }//GEN-LAST:event_buttonPrediksiHariIniActionPerformed

    private void txtNeuronHiddenLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNeuronHiddenLayerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNeuronHiddenLayerActionPerformed

    private void tanggalEsokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanggalEsokActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tanggalEsokActionPerformed

    private void buttonPrediksiHariEsokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPrediksiHariEsokActionPerformed
        NeuralTraining neural = new NeuralTraining();
        String outputPrediction = neural.prediction(FILE_TESTSET_HARI_ESOK, FILE_JST_HARI_ESOK);
        String outputPredictionValue = outputPrediction.substring(1, outputPrediction.length() - 1);

        double resultOutput = ((Double.parseDouble(outputPredictionValue) - 0.1) / 0.8) * 100;
        System.out.println("Output Prediksi Hari Esok: " + outputPrediction + "->" + resultOutput);
        statusCuaca(resultOutput);
        txtHasilPrediksiEsok.setText(statusCuaca(resultOutput));
        bSimpanPrediksi.setEnabled(true);
    }//GEN-LAST:event_buttonPrediksiHariEsokActionPerformed

private void bSimpanPrediksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSimpanPrediksiActionPerformed
    WriteExcel we = new WriteExcel();

    try {
        JFileChooser fileChooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Excel File", new String[]{"xls", "xls"});
        fileChooser.setFileFilter(filter);
        fileChooser.setDialogTitle("Pilih Lokasi Penyimpanan");

        int userSelection = fileChooser.showSaveDialog(MainFrame.this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File files = new File(fileChooser.getSelectedFile() + ".xls");
//            System.out.println("Save as file: " + fileToSave.getAbsolutePath());

            //File files = new File("hasil_prediksi.xls");
            WorkbookSettings wbSettings = new WorkbookSettings();

            wbSettings.setLocale(new Locale("en", "EN"));

            WritableWorkbook workbook = Workbook.createWorkbook(files, wbSettings);
            workbook.createSheet("Hasil Prediksi", 0);
            WritableSheet excelSheet = workbook.getSheet(0);
            we.createLabel(excelSheet);
            we.createContent(excelSheet, getTglHariIni(), getTglEsokHari(), getPrediksiHariIni(), getPrediksiEsokHari(), getHiddenLayer(), getMaxError(), getMaxIteration(), getMomentum(), getLearningRate());

            workbook.write();
            workbook.close();
            JOptionPane.showMessageDialog(null,
                    "Data Prediksi Berhasil disimpan",
                    "Pesan", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (IOException | WriteException ex) {
        JOptionPane.showMessageDialog(null,
                "Data Prediksi gagal disimpan",
                "Pesan", JOptionPane.ERROR_MESSAGE);
    }
}//GEN-LAST:event_bSimpanPrediksiActionPerformed

private void menuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImportActionPerformed
    tableSource.revalidate();
    tableSource.getTableHeader().setReorderingAllowed(false);
    AddSourceFileXls();
    String tanggal = (String) tableSource.getModel().getValueAt(0, 0);
    setJDate(tanggal);
}//GEN-LAST:event_menuImportActionPerformed

    public void removeSelectedRows(JTable table) {
        DefaultTableModel model = (DefaultTableModel) tableSource.getModel();
        int[] rows = table.getSelectedRows();
        for (int i = 0; i < rows.length; i++) {
            model.removeRow(rows[i] - i);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bSaveProperties;
    private javax.swing.JButton bSimpanPrediksi;
    private javax.swing.JButton buttonAddXlsFile;
    private javax.swing.JButton buttonDeleteAudio;
    private javax.swing.JButton buttonNormalisasi;
    private javax.swing.JButton buttonPrediksiHariEsok;
    private javax.swing.JButton buttonPrediksiHariIni;
    private javax.swing.JButton buttonTest;
    private javax.swing.JButton buttonTrain;
    private javax.swing.JMenuItem fileMenuExit;
    private javax.swing.JMenuItem fileMenuTambahFileSuara;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenu menuImport;
    private javax.swing.JScrollPane scrollTable;
    public javax.swing.JTable tableSource;
    private javax.swing.JTextField tanggalEsok;
    private javax.swing.JTextField tanggalHariIni;
    private javax.swing.JTextField txtConvertTime;
    private javax.swing.JTextField txtHasilPrediksiEsok;
    private javax.swing.JTextField txtHasilPrediksiHariIni;
    private javax.swing.JTextField txtLearningRate;
    private javax.swing.JTextField txtMaxError;
    private javax.swing.JTextField txtMaxIteration;
    private javax.swing.JTextField txtMomentum;
    private javax.swing.JTextField txtNeuronHiddenLayer;
    private javax.swing.JTextArea txtPrint;
    private javax.swing.JTextField txtTestTime;
    private javax.swing.JTextField txtTrainTime;
    // End of variables declaration//GEN-END:variables

    private void inputToTableDataset(String fileName, String fileLocation) {

        Vector v = new Vector();
        int no = tableModelDataset.getRowCount() + 1;
        v.add(no);
        v.add(fileName);
        v.add(fileLocation);
        txtPrint.append("\nMemuat file: " + fileLocation);
        tableModelDataset.addRow(v);
    }

    private void inputToTableIdentification(String fileName, int percentage) {

        Vector ve = new Vector();
        int no = tableModelIdentify.getRowCount() + 1;
        ve.add(no);
        ve.add(fileName);
        ve.add(percentage);

        tableModelIdentify.addRow(ve);
    }

    public void updateRow() {
        int no = tableModelDataset.getRowCount();
        for (int i = 0; i < no; i++) {
            tableModelDataset.setValueAt(i + 1, i, 0);
        }
    }

    //convert arrayList double to primitive double aaray
    public static double[] convertDoubles(List<Double> doubles) {
        double[] ret = new double[doubles.size()];
        Iterator<Double> iterator = doubles.iterator();
        for (int i = 0; i < ret.length; i++) {
            ret[i] = iterator.next().doubleValue();
        }
        return ret;
    }

    public final void loadOptionProperties() {
        try {
            conf.loadProperties();
            txtNeuronHiddenLayer.setText(conf.getNeuronHiddenLayer());
            txtLearningRate.setText(conf.getLearningRate());
            txtMomentum.setText(conf.getMomentum());
//            txtNguyenDown.setText(conf.getNguyenDown());
//            txtNguyenUp.setText(conf.getNguyenUp());
            txtMaxIteration.setText(conf.getMaxIteration());
            txtMaxError.setText(conf.getMaxError());

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    "Setting up was Error :" + ex,
                    "Error", JOptionPane.ERROR_MESSAGE);
            dispose();
        }

    }

    public void writeOptionsProperties() {
        try {
            String learningRate = txtLearningRate.getText().toString();
            String momentum = txtMomentum.getText().toString();
            String hiddenLayer = txtNeuronHiddenLayer.getText().toString();
//            String nguyenDown = txtNguyenDown.getText().toString();
//            String nguyenUp = txtNguyenUp.getText().toString();
            String maxIteration = txtMaxIteration.getText().toString();
            String maxError = txtMaxError.getText().toString();

            conf.writeProperties(learningRate, momentum, hiddenLayer, maxIteration, maxError);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null,
                    "Setting up was Error :" + ex,
                    "Error", JOptionPane.ERROR_MESSAGE);
            dispose();
        }
    }

    private String statusCuaca(double outputPrediction) {
        String textHasil = "-";
        if (outputPrediction > 0 && outputPrediction <= 1.5) {
            textHasil = "Tidak Hujan";
        } else if (outputPrediction > 1.5 && outputPrediction <= 2.5) {
            textHasil = "Hujan Sangat Ringan";
        } else if (outputPrediction > 2.5 && outputPrediction <= 3.5) {
            textHasil = "Hujan Ringan";
        } else if (outputPrediction > 3.5 && outputPrediction <= 4.5) {
            textHasil = "Hujan Sedang";
        } else if (outputPrediction > 4.5 && outputPrediction <= 5.5) {
            textHasil = "Hujan Lebat";
        } else if (outputPrediction > 5.5 && outputPrediction <= 6.5) {
            textHasil = "Hujan Sangat Lebat";
        }
        return textHasil;
    }
}
